:root {
  /* for some global variables */
  --background-color-primary: #fff;
  --background-color-alt: #efefef;

  --background-gradient: hsla(50, 91%, 50%, 0.61);

  --font-color-primary: #fff;
  --font-color-alt: rgba(219, 186, 0, 1);

  --button-color-primary: #fff;
  --button__border-color-primary: #fff;
  --button__hover-color-primary: #000;

  --nav-bar-color: rgba(17, 13, 13, 0.95);
}

* {
  margin: 0;
  padding: 0;
  font-family: "Poppins", sans-serif;
}

#banner {
  /* background image + linear gradient . --> do linear gradient before background image */
  /* last num of hsla = opacity (deckkraft) */
  background: linear-gradient(rgba(0, 0, 0, 0.5), hsla(50, 91%, 50%, 0.61)),
    url(public/Barber_Shop_img/banner.jpg);
  /* The linear-gradient() CSS function creates an image consisting of a progressive transition between two or more colors along a straight line. */
  /* side-or-corner (to left[270]/to right[360]) (to top[0deg] /to bottom [180]) --> default to bottom */
  /* linear-color-stop (color stop --> percentage or length along gradients axis) */
  background-size: cover;
  background-position: center;
  /* vh stands for viewport height and vw is for viewport width */
  height: 100vh;
}

.logo {
  width: 140px;
  /* is positioned relative to the nearest positioned ancestor 
  (instead of positioned relative to the viewport, like fixed) */
  position: absolute;
  top: 4%;
  left: 10%;
}

.banner-text {
  text-align: center;
  color: var(--font-color-primary);
  padding-top: 180px;
}

.banner-text h1 {
  font-size: 130px;
  font-family: "Kaushan Script", cursive;
}

.banner-text p {
  font-size: 20px;
  font-style: italic;
}

.banner-btn {
  /* it pushes itself from the banner text */
  margin: 70px auto 0;
}

.banner-btn a {
  width: 150px;
  text-decoration: none;
  /* The element itself is formatted as an inline element, but it can apply height and width values.
   It is placed as an inline element (on the same line as adjacent content). */
  display: inline-block;
  margin: 0 10px;
  padding: 12px 0;
  color: var(--font-color-primary);
  border: 0.5px solid var(--button__border-color-primary);
  position: relative;
  /* higer z-index = more to screen */
  /* less = reduce priority */

  /* Z Index ( z-index ) is a CSS property that defines the order of overlapping HTML elements.
  ONLY WORKS FOR POSITIONED ELEMENTS (ABSOLUTE, RELATIVE, FIXED)
  */
  z-index: 1;
  /* # take property and time  */
  /* Specifies the name or names of the CSS properties to which transitions should
   be applied. Only properties listed here are animated during transitions;
    changes to all other properties occur instantaneously as usual. */
  transition: color 0.5s;
}

.banner-btn a:hover {
  /* # it will change color of text after .5s (when button gets filled with span width) */
  color: var(--button__hover-color-primary);
}

/* make half of button white */
.banner-btn a span {
  width: 0;
  height: 100%;
  /* relative to anchor tag */
  position: absolute;
  top: 0;
  left: 0;
  background: var(--background-color-primary);

  /* it will stay behind the text which is on z-index 1 */
  z-index: -1;
  /* CSS transitions provide a way to control animation speed when changing CSS properties
  from .banner-btn a span to .banner-btn a:hover span 
  */
  /* --> it fills button slowly */
  transition: 0.5s;
}

/* if the anchor tag inside the banner-btn class gets hover apply style to span which is inside in all of them  */
.banner-btn a:hover span {
  width: 100%;
}

#sideNav {
  /* incease widht of side nav - side nav lays on top of banner */
  width: 250px;
  /* like 100% of the viewport? */
  height: 100vh;
  /* it will scroll with */
  position: fixed;
  /* The right property affects the horizontal position of a positioned element. This property has no effect on non-positioned elements.
   If position: absolute; or position: fixed; - the right property sets the right edge of an element to a unit to the right of the right edge of its nearest positioned ancestor. */

  /* initally hidden */
  right: -250px;
  top: 0;
  background-color: var(--nav-bar-color);
  z-index: 2;
  /* if something happens related to #sideNav (when a style changes) */
  transition: 0.5s;
}

nav ul li {
  /* no dots */
  list-style: none;
  /* expand */
  margin: 50px 20px;
  /* padding = it pushes itself away */
}

nav ul li a {
  text-decoration: none;
  color: white;
}

#menuBtn {
  width: 50px;
  height: 50px;
  /* https://www.w3schools.com/css/css_image_transparency.asp */
  background: transparent;
  text-align: center;
  position: fixed;
  right: 30px;
  top: 20px;
  border-radius: 3px;
  z-index: 3;
  cursor: pointer;
}

#menuBtn img {
  width: 25px;
  height: auto;
  margin-top: 15px;
}

/* for smaller screens/ viewports */
/* The viewport is the user's visible area of a web page. 
The viewport varies with the device, and will be smaller on
 a mobile phone than on a computer screen. */
@media screen and (max-width: 770px) {
  .banner-text h1 {
    font-size: 44px;
  }

  .banner-btn a {
    display: block;
    /* // center */
    margin: 20px auto;
  }
}

/* -------------------------- feature -----------------------  */
#feature {
  width: 100%;
  padding: 70px 0;
}

.title-text {
  /* The text-align property 
  in CSS is used for aligning the inner content of a block element */
  text-align: center;
  padding-bottom: 70px;
}

.title-text p {
  margin: auto;
  font-size: 20px;
  color: var(--font-color-alt);
  font-weight: bold;
  /* margin are automatically set by the browser based on the container, to make element centered */
  position: relative;
  z-index: 1;
  display: inline-block;
}

/* Insert something after the content of each <p> element */
.title-text p::after {
  /* Die content CSS Eigenschaft wird mit ::before } anonymous not in DOM 
   und ::after Pseudo-elementen genutzt um Inhalte in einen Element zu generieren */
  content: "";
  width: 50px;
  height: 35px;

  /* There is no difference. Both will work in the same way.
 CSS background properties are used to define the background effects of an element. */
  background: linear-gradient(
    rgba(255, 255, 255, 0.5),
    hsla(50, 91%, 50%, 0.747)
  );
  position: absolute;
  /* from top left corner the gradient */
  /* gradient from top */
  top: -22;
  left: 0;
  z-index: -1;
  rotate: (10deg);

  /* # like a leaf */
  border-top-left-radius: 35px;
  border-bottom-right-radius: 35px;
}

.title-text h1 {
  font-size: 50px;
}

/* container */
.feature-box {
  width: 80%;
  margin: auto;
  display: flex;
  /* The CSS flex-wrap property is used to specify whether flex items are
   forced into a single line or wrapped onto multiple lines */
  flex-wrap: wrap;

  /* The align-items property specifies the default alignment for items inside the flexible container. */
  /* https://www.w3schools.com/cssref/playdemo.asp?filename=playcss_align-items&preval=baseline */
  align-items: center;
  text-align: center;
}

.features {
  /* The flex-basis property is a sub-property of the Flexible Box Layout module. 
  It specifies the initial size of the flex item, before any available space is distributed according to the flex factors. When omitted from the flex shorthand, its specified value is the length zero. */

  /* // like the width */
  flex-basis: 50%;
}

.features-img {
  flex-basis: 50%;
  margin: auto;
}

.features-img img {
  width: 70%;
  border-radius: 10px;
}

.features h1 {
  text-align: left;
  margin-bottom: 10px;
  font-weight: 100;
  color: var(--font-color-alt);
}

.features-description {
  display: flex;
  align-items: center;
  margin-bottom: 40px;
}

.features-icon .fa-solid {
  width: 50px;
  height: 50px;
  font-size: 30px;
  line-height: 50px;
  border-radius: 8px;
  color: var(--font-color-alt);
  border: 1px solid var(--font-color-alt);
}

.features-text p {
  padding: 0 20px;
  text-align: initial;
}

@media screen and (max-width: 770px) {
  .title-text h1 {
    font-size: 35px;
  }
  .features {
    /* seperate features from images */
    flex-basis: 100%;
  }

  .features-img {
    flex-basis: 100%;
  }
  .features-img img {
    width: 100%;
  }
}

/* -------------------------- service -----------------------  */
#service {
  width: 100%;
  padding: 70px 0;
  background: var(--background-color-alt);
}

.service-box {
  width: 80%;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-around;
  margin: auto;
}

.single-service {
  flex-basis: 48%;
  text-align: center;
  border-radius: 7px;
  margin-bottom: 20px;
  color: var(--font-color-primary);
  position: relative;
}

.single-service img {
  /* 100% of its box */
  width: 100%;
  border-radius: 7px;
}

.overlay {
  width: 100%;
  height: 100%;
  /* on top of single service */
  position: absolute;
  top: 0;
  border-radius: 7px;
  cursor: pointer;
  background: linear-gradient(rgba(0, 0, 0, 0.5), hsla(50, 91%, 50%, 0.404));
  /* # make it invisible */
  opacity: 0;
  /* remove/ apply the overlay in 1 second: duration from opacity 0 to 1 */
  transition: 1s;
}

/* # when hover over single-servie change .overlay style */
.single-service:hover .overlay {
  opacity: 1;
}

.service-description {
  width: 80%;
  /* on top of single-service */
  position: absolute;
  bottom: 0%;
  left: 50%;
  /* move it 50% left */
  transform: translateX(-50%);
  opacity: 0;
  transition: 1s;
}

.single-service:hover .service-description {
  /* animation: show and go up */
  opacity: 1;
  bottom: 40%;
}

hr {
  background: var(--background-color-primary);
  height: 2px;
  border: 0;
  margin: 15px auto;
  width: 60%;
}

.service-description p {
  font-size: 14px;
}

@media screen and (max-width: 770px) {
  .single-service {
    /* again every single-service item alone (column-width) */
    flex-basis: 100%;
    margin-bottom: 30px;
  }
  .service-description p {
    font-size: 12px;
  }
  hr {
    margin: 5px auto;
  }
  .single-service:hover .service-description {
    bottom: 25% !important;
  }
}

/* -------------------------- testimonial -----------------------  */
#testimonial {
  width: 100%;
  padding: 70px 0;
}

.testimonial-row {
  /* space from right and left side */
  width: 80%;
  margin: auto;
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  flex-wrap: wrap;
}

.testimonial-col {
  flex-basis: 28%;
  padding: 10px;
  margin-bottom: 30px;
  border-radius: 5px;
  box-shadow: 0 10px 20px 3px grey;
  cursor: pointer;
  transition: transform 1s;
}

.testimonial-col:hover {
  /* it goes up - because at the top y = 0 */
  transform: translateY(-7px);
}

.testimonial-col p {
  font-size: 14px;
}

.user {
  display: flex;
  align-items: center;
  margin: 20px 0;
}

.user img {
  width: 40px;
  margin-right: 20px;
  border-radius: 50%;
}

.user-info .fa-instagram {
  margin-left: 10px;
  color: RGB(131, 58, 180);
  font-size: 20px;
}

.user-info small {
  color: #009688;
}

@media screen and (max-width: 770px) {
  .testimonial-col {
    flex-basis: 100%;
  }
}
